# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# TODO!: into $HOME/.local/scripts 
function loadenv() {
  # TODO: save pwd in some file, so that when you call unset_all in works in lifo manner
  if [ ! -f .env ]; then
    echo "No .env file in directory $(pwd), exiting..."
    return
  fi
  export $(grep -v '^#' .env | xargs)
}
alias le="loadenv"

# TODO!: into $HOME/.local/scripts
function unset_all() {
  if [ ! -f .env ]; then
    echo "No .env file in directory $(pwd), exiting..."
    return
  fi
  unset $(grep -v '^#' .env | cut -d "=" -f1)
}
alias ua="unset_all"

function tf_fmt() {
  # TODO: fix it, it still works on .terraform...
  find . -type f \( -name "*.tf" -or -name "*.tfvars" -and ! -path "./.terraform/*" \) -exec terraform fmt {} \;
}

# TODO: into... cleanup script? stuff that removes dangling docker images + git prune -v + node_modules on "stale" dirs
# TODO: shall such cleanup script be based on list from '~/.repos.txt' ?
function git_prune() {
  for n in `find $1 -name .git`
  do
    cd ${n/%.git/}
    git prune -v
  done
}

# TODO: into git-scripts
commit_hash() {
  git rev-parse --short=10 HEAD
}

# TODO: clean it up...
r () {
    cd "$(git rev-parse --show-toplevel 2>/dev/null)"
}

vault_token() {
  readonly service=${1:?"Vault service must be specified."}
  dazn vault login -s $1 && vault token lookup | awk '$1 ~ /^id/' | awk '{print $2}'
}

function llamas_repos() {
  # TODO: topics passed as flags? org as arg?
  gh api --paginate "search/repositories?q=org:getndazn+topic:llamas+topic:katowice+archived:false&per_page=100" | jq '.items[] | { full_name, html_url, topics, default_branch }'
}

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# TODO: those were installed via homebrew...
# TODO: used '$HOMEBREW_PREFIX/share..' before, but didnt work
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# TODO: Split it up to be more manageable...
plugins=(
    brew
    git
    # zsh-autosuggestions
    # zsh-syntax-highlighting
    # zsh-history-substring-search
    # TODO: git clone'd stuff goes here...
    you-should-use
    # zsh-bat
    fzf
    aws
    node
    npm
    vscode
    zig-shell-completions
)


source $ZSH/oh-my-zsh.sh
source $HOME/.zsh_aliases
## Zplug init
source $ZPLUG_HOME/init.zsh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
# TODO: make sure that it is cloned only if not present!
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# TODO: as above
# curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
# TODO: run zplug update on shell start?

# TODO: speedtest-cli install via apt/brew depending on OS - https://www.speedtest.net/apps/cli
# TODO: list of curl 'utils' - cht.sh, wttr.in, ifconfig

#TODO: https://pragmaticpineapple.com/four-useful-fzf-tricks-for-your-terminal/ - fuzzy change dir with alt-c
#TODO: todolisty z tmuxem!!! sprawdz config

# TODO: mac: remap ~ with ``
# TODO: mc? (midnight commander)

# TODO: seems it is not loaded properly...
zplug "jeffreytse/zsh-vi-mode"

# TODO: is zplug the valid option?
# TODO: plugin for mise
eval "$(mise activate zsh)"
# ohmyzsh/ohmyzsh

# TODO: fetch if not present
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# git clone https://github.com/MichaelAquilina/zsh-you-should-use.git $ZSH_CUSTOM/plugins/you-should-use
# git clone https://github.com/fdellwing/zsh-bat.git $ZSH_CUSTOM/plugins/zsh-ba

setopt EXTENDED_HISTORY      # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY    # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY         # Share history between all sessions.
setopt HIST_IGNORE_DUPS      # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS  # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_SPACE     # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS     # Do not write a duplicate event to the history file.
setopt HIST_VERIFY           # Do not execute immediately upon history expansion.
setopt APPEND_HISTORY        # append to history file (Default)
setopt HIST_NO_STORE         # Don't store history commands
setopt HIST_REDUCE_BLANKS    # Remove superfluous blanks from each command line being added to the history.

source <(fzf --zsh)
# TODO: create it and add into dotfiles
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# TODO: into $HOME/.local/scripts ?
# TODO: dokoncz to...
LAST_KNOWN_FZF_GIT_HASH="5002c0ec97b8bbfa0f87eaa3940db64f32235a0800606a28498230884adb4927"
FZF_GIT_REMOTE="https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/fzf-git.sh"
TMP_FZF_GIP="/tmp/fzf-git.sh"
# if ! curl -sSfL "$FZF_GIT_REMOTE" -o "$TMP_FZF_GIP"; then
#     rm -f "$tmp_file"
#     return 2
# fi

# TODO: obly if exists?
# if command -v ngrok &>/dev/null; then
#     eval "$(ngrok completion)"
# fi

# k8s/kubectl section
source <(kubectl completion zsh)  # set up autocomplete in zsh into the current shell
echo '[[ $commands[kubectl] ]] && source <(kubectl completion zsh)' >> ~/.zshrc # add autocomplete permanently to your zsh shell

eval "$(devtui completion zsh)"

# TODO: backup that stuff into .local/scripts
echo
echo "Remember you've set 'SCRIPTS_FILE' that points to file with zsh scripts, edit it via \"code \$SCRIPTS_FILE\"".
echo "Also at: \$HOME/.local/bin/tf-destroy.sh"
echo "Also at: \$HOME/.local/bin/get-config-versions.sh"